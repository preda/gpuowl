# genbundle.sh for crossplatform cmake
separate_arguments(CL_SOURCES)
message("CL_SOURCES = ${CL_SOURCES}")

file(WRITE "${OUTPUT}" "// bundle.cpp generated with genbundle.cmake\n")
file(APPEND "${OUTPUT}" "// Required CMAKE 3.16+ (for windows MSVC 17.0+)\n")
file(APPEND "${OUTPUT}" "// Works with Windows 10/11 | Linux/UNIX\n")
file(APPEND "${OUTPUT}" "// by CrazyDragon(GoodDrakon4ik)\n")
file(APPEND "${OUTPUT}" "// Copyright (C) Mihai Preda\n")
file(APPEND "${OUTPUT}" "// Generated file, do not edit. See genbundle.cmake and src/cl/*.cl\n\n")
file(APPEND "${OUTPUT}" "#include <vector>\n")
file(APPEND "${OUTPUT}" "static const std::vector<const char*> CL_FILES{\n")

set(names "")
set(file_count 0)
foreach(cl_file IN LISTS CL_SOURCES)
    get_filename_component(fname "${cl_file}" NAME)
    file(READ "${cl_file}" cl_content)

    set(chunk_size 15000)
    string(LENGTH "${cl_content}" len)
    math(EXPR num_chunks "${len} / ${chunk_size} + 1")
    message(STATUS "File: ${cl_file} | Lenght: ${len} | Needed chunks = ${num_chunks}")

    file(APPEND "${OUTPUT}" "// ${cl_file}\n")

    set(pos 0)
    foreach(i RANGE 0 ${num_chunks})
        math(EXPR start_pos "${i} * ${chunk_size}")
        math(EXPR remaning "${len} - ${start_pos}")
        if (remaning LESS 1)
            break()
        endif()
        if (remaning GREATER ${chunk_size})
            math(EXPR this_size "${chunk_size}")
        else()
            set(this_size "${remaning}")
        endif()
        string(SUBSTRING "${cl_content}" ${start_pos} ${this_size} chunk)
        if (i EQUAL 0)
            file(APPEND "${OUTPUT}" "R\"cltag(${chunk})cltag\"")
        else()
            file(APPEND "${OUTPUT}" "\n R\"cltag(${chunk})cltag\"")
        endif()
        message(STATUS "Chunk: ${i} - generated.")
    endforeach()
    math(EXPR file_count "${file_count} + 1")
    list(LENGTH CL_SOURCES total_files)
    if (NOT file_count EQUAL total_files)
        file(APPEND "${OUTPUT}" ",\n")
    else()
        file(APPEND "${OUTPUT}" "\n")
    endif()
    set(names "${names}\"${fname}\",")
endforeach()

file(APPEND "${OUTPUT}" "};\n\n")
file(APPEND "${OUTPUT}" "static const std::vector<const char*> CL_FILE_NAMES{${names}};\n\n")
file(APPEND "${OUTPUT}" "const std::vector<const char*>& getClFileNames() { return CL_FILE_NAMES; }\n")
file(APPEND "${OUTPUT}" "const std::vector<const char*>& getClFiles() { return CL_FILES; }\n")
